from typing import List, Optional

from pydantic import BaseModel, Field


# --------------------------------------------------------------------
# GET Collections
# --------------------------------------------------------------------
class ListCollectionsResponse(BaseModel):
    """
    Response model for listing all collection names.
    """

    collections: List[str] = Field(
        ..., description="A list of existing Qdrant collection names."
    )


class Document(BaseModel):
    """
    Representation of a document with its metadata.

    Attributes:
        id: Unique identifier for the document.
        text: The document content.
        source: Source filename or identifier.
        file_type: Type of the document file.
        page_number: Optional page number in the source document.
        upload_date: ISO format timestamp of when the document was uploaded.
    """

    id: str = Field(..., description="Unique identifier for the document")
    text: str = Field(..., description="The document content")
    source: str = Field(..., description="Source filename or identifier")
    file_type: str = Field(..., description="Type of the document file")
    page_number: Optional[int] = Field(
        None, description="Page number in the source document"
    )
    upload_date: Optional[str] = Field(
        ..., description="ISO format timestamp of upload"
    )


class CollectionDetailResponse(BaseModel):
    """
    Detailed information about a specific collection.

    Attributes:
        name: Collection name.
        num_vectors: Number of vectors stored.
        vector_size: Dimensionality of vectors.
        distance: Distance metric used.
        segments_count: Number of segments in the collection.
        collection_type: 'fastembed', 'manual', or 'unknown'.
        vector_fields: List of named vector fields.
        status: String representation of Qdrant's internal status.
        vectors_count: Number of vectors in the collection.
        indexed_vectors_count: Number of vectors indexed for search.

         sample_documents: List of payload previews.
    """

    name: str = Field(..., description="Name of the collection.")
    num_vectors: int = Field(
        ..., description="Total number of vectors in this collection."
    )
    vector_size: Optional[int] = Field(
        None, description="Dimensionality of each stored vector."
    )
    distance: Optional[str] = Field(
        None, description="Distance metric used by the collection index."
    )
    segments_count: Optional[int] = Field(
        None, description="Number of segments in the collection."
    )

    collection_type: str = Field(
        "unknown", description="Type of collection ('fastembed', 'manual', 'unknown')."
    )
    vector_fields: List[str] = Field(
        [], description="List of named vector fields (if manual)."
    )
    status: str = Field("unknown", description="Stringified Qdrant status object.")

    vectors_count: Optional[int] = Field(None, description="Number of vectors stored.")
    indexed_vectors_count: Optional[int] = Field(
        None, description="Number of vectors indexed for search."
    )

    sample_documents: List[Document] = Field(
        [], description="A few sample payloads from the collection."
    )


# --------------------------------------------------------------------
# CREATE Collections
# --------------------------------------------------------------------
class CreateCollectionResponse(BaseModel):
    """
    Response model for creating a new collection.

    (We have removed the explicit “create” endpoint; this exists in case you want
    to re-enable or document creation via a different API.)
    """

    name: str = Field(..., description="Name of the created collection.")


# --------------------------------------------------------------------
# UPDATE Collections
# --------------------------------------------------------------------
class UploadDocumentsResponse(BaseModel):
    """
    Response model for document upload (returns created point IDs).

    Attributes:
        uploaded_ids: List of Qdrant point IDs generated by the upload.
        uploaded_count: Total number of document chunks uploaded.
        message: Human-readable message about the upload result.
    """

    uploaded_ids: List[str] = Field(
        ..., description="List of Qdrant point IDs generated by the upload."
    )
    uploaded_count: int = Field(
        ..., description="Total number of document chunks uploaded."
    )
    message: str = Field(
        ..., description="Human-readable message about the upload result."
    )


# --------------------------------------------------------------------
# DELETE Collections
# --------------------------------------------------------------------
class DeleteCollectionResponse(BaseModel):
    """
    Response model for confirming deletion of a collection.

    Attributes:
        name: Name of the collection that was deleted.
        deleted: True if deletion succeeded, False otherwise.
        message: Human-readable confirmation message.
    """

    name: str = Field(..., description="Name of the collection.")
    deleted: bool = Field(..., description="True if deletion succeeded.")
    message: str = Field(..., description="Human-readable confirmation message.")


# --------------------------------------------------------------------
# SEARCH Collections
# --------------------------------------------------------------------
class SearchRequest(BaseModel):
    """
    Request model for performing a semantic search.

    Attributes:
        query: Raw text to embed & search.
        top_k: Number of results to return (default: 5).
    """

    query: str = Field(..., description="Raw text query string.")
    top_k: int = Field(
        5, description="Number of nearest neighbors to return (default: 5)."
    )


# In this case, when we perform a similarity search, we return
# a list of SearchHit objects, each representing a single hit in the search results.
# We can inherit from Document to reuse the common fields, and add a score field, since we want the associated Document.
class SearchHit(Document):
    """
    Represents one hit in the search results.

    Attributes:
        id: Point ID in Qdrant.
        score: Similarity score (float).
        text: The chunk of text returned by Qdrant.
        source: Optional source label, usually the document name or URL.
        file_type: Optional type of source file (e.g., 'pdf', 'docx', 'url').
        page_number: Optional index of this chunk in the original document.
    """

    score: float = Field(..., description="Relevance score returned by Qdrant.")


class SearchResponse(BaseModel):
    """
    Response model for semantic search results.

    Attributes:
        results: List of SearchHit objects containing search results.
    """

    results: List[SearchHit] = Field(
        ..., description="List of search hits (id, score, page_content, source)."
    )
